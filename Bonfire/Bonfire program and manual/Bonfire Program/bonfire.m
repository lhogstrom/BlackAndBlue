% function bonfire

% Description:
% STEP 4 in bonfire analysis.  Generates the process-based SWC file, named p_SWC, which characterized neuronal morphology in a similar fashion to an
% SWC description, but based on processes rather than nodes within a process.  Also modifies the SWC matrix to include an additional column (8)
% indicating which process within the p_SWC matrix each node belongs to.  Finally, performs process-based Sholl analysis on each cell for each
% labeling scheme, and saves a file containing the results to the cell folder, where it will later be read by bonfire_results.
% 
% Input:
%   Prompts the user for the target folder, from which it identifies the cells to be analyzed and extracts the appropriate *_final.swc files.
% 
% Output:
%   Generates a data file containing the order-based Sholl analysis results for each cell and saves it to the cell folder.  This file also contains
%   the SWC and p_SWC information for this cell, as well as the location it has been save to.
%       SWC -   digitized neuronal morphology in SWC format
%       p_SWC - modified, process-based SWC format containing information at the process-level rather than the node-level
%       sholl_array -   structured array containing a vector describing the Sholl ring distances, and a matrix describing the order-specific Sholl
%                       information for each of the ordering schemes, names sholl_#, which is generated by swc_sholl.
% 


% Initialize required variables
[N ring_start r_inc pix_conv scale_factor vect] = bonfire_parameters;
cell_list = [];
qq = 0;
directory_root = uigetdir;
A = dir(directory_root);

% Build cell_list
for ii = 3:size(A,1);
    if getfield(A,{ii,1},'isdir') == 1;
        qq = qq + 1;
        if ischar(getfield(A,{ii,1},'name'));
            cell_list{qq} = getfield(A,{ii,1},'name');
        else
            cell_list{qq} = num2str(getfield(A,{ii,1},'name'));
        end
    else
    end
end

% For each cell, perform the following
for ii = 1:length(cell_list);

%     Load and shape data
    pic = imread([directory_root,'\',cell_list{ii},'\',cell_list{ii},'.tif']);
    [m,n] = size(pic);
    SWC = importdata([directory_root,'\',cell_list{ii},'\',cell_list{ii},'_final.swc'],' ');
    SWC(:,3) = SWC(:,3)*scale_factor;
    SWC(:,4) = SWC(:,4)*scale_factor;
    SWC(:,6) = SWC(:,6)*scale_factor;

%     Calculate the center and radius of the circles for sholl Analysis;
    x0 = SWC(1,3);
    y0 = SWC(1,4);
    r_start = SWC(1,6);
    if ring_start==0
        ring_dist = ring_start : r_inc : (N-1)*r_inc;
    else
         ring_dist = ring_start : r_inc : (N+1)*r_inc; 
    end %if ring_dist
    ring_dist = ring_dist * pix_conv;

%     Generate the p_SWC matrix and perform Sholl analysis
    [SWC, p_SWC] = swc_pgen(SWC);
    sholl_4 = swc_sholl(SWC,p_SWC,4);
    sholl_5 = swc_sholl(SWC,p_SWC,5);
    sholl_6 = swc_sholl(SWC,p_SWC,6);
    sholl_array = {ring_dist sholl_4 sholl_5 sholl_6};

%     Plot neuron with Sholl rings, branch points, and terminal tips
    figure(ii); clf; hold on;
    title(['Cell Name:  ',cell_list{ii}]);
    imagesc(pic);
    colormap('gray');
    axis([0 n 0 m]);
    swc_plot(SWC);
    circles(x0,y0,N,r_start,r_inc,'b')

%     Save the output files to the cell folders with the rest of the data
    output_location = [directory_root,'\',cell_list{ii},'\','Cell_',cell_list{ii},'_Output'];
    cell_info = {output_location SWC p_SWC sholl_array};
    save([directory_root,'\',cell_list{ii},'\','Cell_',cell_list{ii},'_Output'],'cell_info');
end
